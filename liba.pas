unit liba;

{ *********************************************************************** }
{ * Pipeline gas compressibility factor computation                     * }
{ *********************************************************************** }

{
 p-T-ranges
 absolute pressure    0  to   65 MPa
 temperature        225  to  350 K

 Ranges for percentage molar composition:

 A: pipeline quality natural gas
 B: wider ranges of application

                      A           B
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 methane          70 to 100   50 to 100
 nitrogen          0 to  20    0 to  50
 carbon dioxide    0 to  20    0 to  30
 ethane            0 to  10    0 to  20
 propane           0 to 3.5    0 to   5
 water             0 to 0.015  0 to 0.015
 hydrogen sulfide
 hydrogen          0 to  10    0 to  10
 carbon monoxide   0 to   3    0 to   3
 oxygen
 i-butane          0 to 1.5    0 to 1.5
 n-butane          0 to 1.5    0 to 1.5
 i-pentane         0 to 0.5    0 to 0.5
 n-pentane         0 to 0.5    0 to 0.5
 n-hexane          0 to 0.1    0 to 0.1
 n-heptane         0 to 0.05   0 to 0.05
 n-octane          0 to 0.05   0 to 0.05
 n-nonane          0 to 0.05   0 to 0.05
 n-decane          0 to 0.05   0 to 0.05
 helium            0 to 0.5    0 to 0.5
 argon


 The expected uncertainty of the calculated results are for
 pipeline quality natural gases:
 +/- 0,1% within p-T range 0 to 12 MPa, 263 to 350 K
 +/- 0,6% within p-T range 0 to 60 MPa, 225 to 350 K
}


interface

const naga=21;

type aga=array[1..naga] of double;

procedure DCAGA (var XJ: aga);
procedure DZOFPT(var P,T,D,Z,BMIX: double);


implementation

const nc=58;

type arc=array[1..nc] of double;
     aic=array[1..nc] of integer;

const A:arc =
  (0.153832600,  1.341953000, -2.998583000, -0.048312280,  0.375796500, -1.589575000, -0.053588470,  0.886594630, -0.710237040, -1.471722000,  1.321850350,  -0.786659250,
   0.2291290E-8, 0.157672400, -0.436386400, -0.044081590, -0.003433888,  0.032059050,  0.024873550,  0.073322790, -0.001600573,  0.642470600, -0.416260100,  -0.066899570,
   0.279179500, -0.696605100, -0.002860589, -0.008098836,  3.150547000,  0.007224479, -0.705752900,  0.534979200, -0.079314910, -1.418465000, -0.599905E-16,  0.105840200,
   0.034317290, -0.007022847,  0.024955870,  0.042968180,  0.746545300, -0.291961300,  7.294616000, -9.936757000, -0.005399808, -0.243256700,  0.049870160,   0.003733797,
   1.874951000,  0.002168144, -0.658716400,  0.000205518,  0.009776195, -0.020487080,  0.015573220,  0.006862415, -0.001226752,  0.002850908);

const B:aic = (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,6,6,7,7,8,8,8,9,9);
const C:aic = (0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1);
const K:aic = (0,0,0,0,0,0,0,0,0,0,0,0,3,2,2,2,4,4,0,0,2,2,2,4,4,4,4,0,1,1,2,2,3,3,4,4,4,0,0,2,2,2,4,4,0,2,2,4,4,0,2,0,2,1,2,2,2,2);
const G:aic = (0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0);
const Q:aic = (0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1);
const F:aic = (0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
const S:aic = (0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
const W:aic = (0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);

const U:arc = (0,0.5,1,3.5,-0.5,4.5,0.5,7.5,9.5,6,12,12.5,-6,2,3,2,2,11,-0.5,0.5,0,4,6,21,23,22,-1,-0.5,7,-1,6,
               4,1,9,-13,21,8,-0.5,0,2,7,9,22,23,1,9,3,8,23,1.5,5,-0.5,4,7,3,0,1,0);

const MW:aga = (16.0430, 28.0135, 44.0100, 30.0700,  44.0970,  18.0153,  34.0820,   2.0159, 28.0100, 31.9988, 58.1230,
                58.1230, 72.1500, 72.1500, 86.1770, 100.2040, 114.2310, 128.2580, 142.2850,  4.0026, 39.9480);

const EI:aga = (151.318300,  99.737780, 241.960600, 244.166700, 298.118300, 514.015600, 296.355000 , 26.957940, 105.534800, 122.766700, 324.068900,
                337.638900, 365.599900, 370.682300, 402.636293, 427.722630, 450.325022, 470.840891, 489.558373,   2.610111, 119.629900);

const KI:aga = (0.4619255, 0.4479153, 0.4557489, 0.5279209, 0.5837490, 0.3825868, 0.4618263, 0.3514916, 0.4533894, 0.4186954, 0.6406937,
                0.6341423, 0.6738577, 0.6798307, 0.7175118, 0.7525189, 0.7849550, 0.8152731, 0.8437826, 0.3589888, 0.4216551);

const GI:aga = (0.000000, 0.027815, 0.189065, 0.079300, 0.141239, 0.332500, 0.088500, 0.034369, 0.038953, 0.021000, 0.256692,
                0.281835, 0.332267, 0.366911, 0.289731, 0.337542, 0.383381, 0.427354, 0.469659, 0.000000, 0.000000);

const QI:aga = (0, 0, 0.69, 0, 0, 1.06775, 0.633276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

const FI:aga = (0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

const SI:aga = (0, 0, 0, 0, 0, 1.5822, 0.390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

const WI:aga = (0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

const EIJ:array[1..naga] of aga =
  ((1.000000, 0.971640, 0.960644, 1.000000, 0.994635, 0.708218, 0.931484, 1.170520, 0.990126, 1.000000, 1.019530, 0.989844, 1.002350, 0.999268, 1.107274, 0.880880, 0.880973, 0.881067, 0.881161, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.022740, 0.970120, 0.945939, 0.746954, 0.902271, 1.086320, 1.005710, 1.021000, 0.946914, 0.973384, 0.959340, 0.945520, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 0.925053, 0.960237, 0.849408, 0.955052, 1.281790, 1.500000, 1.000000, 0.906849, 0.897362, 0.726255, 0.859764, 0.855134, 0.831229, 0.808310, 0.786323, 0.765171, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.022560, 0.693168, 0.946871, 1.164460, 1.000000, 1.000000, 1.000000, 1.013060, 1.000000, 1.005320, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.034787, 1.000000, 1.000000, 1.000000, 1.004900, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.008692, 1.010126, 1.011501, 1.012821, 1.014089, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.100000, 1.000000, 1.300000, 1.300000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000));

const UIJ:array[1..naga] of aga =
  ((1.000000, 0.886106, 0.963827, 1.000000, 0.990877, 1.000000, 0.736833, 1.156390, 1.000000, 1.000000, 1.000000, 0.992291, 1.000000, 1.003670, 1.302576, 1.191904, 1.205769, 1.219634, 1.233498, 1.000000, 1.000000),
   (1.000000, 1.000000, 0.835058, 0.816431, 0.915502, 1.000000, 0.993476, 0.408838, 1.000000, 1.000000, 1.000000, 0.993556, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 0.969870, 1.000000, 1.000000, 1.045290, 1.000000, 0.900000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.066638, 1.077634, 1.088178, 1.098291, 1.108021, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.065173, 1.000000, 0.971926, 1.616660, 1.000000, 1.000000, 1.250000, 1.250000, 1.250000, 1.250000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.028973, 1.033754, 1.038338, 1.042735, 1.046966, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000));

const KIJ:array[1..naga] of aga =
  ((1.000000, 1.003630, 0.995933, 1.000000, 1.007619, 1.000000, 1.000080, 1.023260, 1.000000, 1.000000, 1.000000, 0.997596, 1.000000, 1.002529, 0.982962, 0.983565, 0.982707, 0.981849, 0.980991, 1.000000, 1.000000),
   (1.000000, 1.000000, 0.982361, 1.007960, 1.000000, 1.000000, 0.942596, 1.032270, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.008510, 1.000000, 1.000000, 1.007790, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.910183, 0.895362, 0.881152, 0.867520, 0.854406, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 0.986893, 1.000000, 0.999969, 1.020340, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.968130, 0.962870, 0.957828, 0.952441, 0.948338, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000));

const GIJ:array[1..naga] of aga =
  ((1.000000, 1.000000, 0.807653, 1.000000, 1.000000, 1.000000, 1.000000, 1.957310, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 0.982746, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 0.370296, 1.000000, 1.673090, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000),
   (1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000));

const RGAS:double = 8.31451E-3;

var BI:  array[1..18] of double;
    CNS: array[1..58] of double;
    K1: double;


function power(x,y:double):double;
begin
 if x<=0 then power:=0 else power:=exp(y*ln(x));
end;


procedure DCAGA (var XJ:aga);

var I,J,N: integer; XI: aga; SUM,U1,G1,Q1,F1,E1,XIJ,EIJ0,GIJ0,BN: double;

begin
 for  J := 1 to 21  do XI[J]:=XJ[J];

//.....Normalize mole fractions
 SUM:=0;
 for I:= 1 to 21 do SUM  :=SUM+XI[I];
 for I:= 1 to 21 do XI[I]:=XI[I]/SUM;

//.....Calculate molecular weight
 RGAS := 8.31451E-3;

 for  N := 1 to 18 do BI[N] := 0;

 K1:=0; U1:=0; G1:=0; Q1:=0; F1:=0; E1:=0;

 for  I := 1 to 21  do begin
  K1 := K1 + XI[I]*power(KI[I],2.5);                                 // B.11;
  U1 := U1 + XI[I]*power(EI[I],2.5);                                 // B.6;
  G1 := G1 + XI[I]*GI[I];                                            // B.7;
  Q1 := Q1 + XI[I]*QI[I];                                            // B.8;
  F1 := F1 + XI[I]*XI[I]*FI[I];                                      // B.9;
  E1 := E1 + XI[I]*EI[I];
 end;

 K1:=K1*K1;                                                          // B.11;
 U1:=U1*U1;                                                          // B.6;

// for I := 1 to 8 do begin
//  for J := I+1 to 19 do begin
 for I:=1 to 20 do begin
  for J:=I+1 to 21 do begin
   XIJ:=XI[I]*XI[J];
   if (XIJ<>0) then begin
    K1:=K1+2.0*XIJ*(power(KIJ[I,J],5.0)-1.0)*power(KI[I]*KI[J],2.5); // B.11;
    U1:=U1+2.0*XIJ*(power(UIJ[I,J],5.0)-1.0)*power(EI[I]*EI[J],2.5); // B.6 ??? 2*
    G1:=G1+XIJ*(GIJ[I,J] - 1.0)*(GI[I] + GI[J]);                     // B.7;
   end;
  end;
 end;

 for I:=1 to 21 do begin
  for J:=I to 21 do begin
   XIJ := XI[I]*XI[J];
   if (XIJ<>0) then begin
    if (I<>J) then XIJ:=2*XIJ;
    EIJ0:=EIJ[I,J]*sqrt(EI[I]*EI[J]);                                // B.3;
    GIJ0:=GIJ[I,J]*(GI[I]+GI[J])/2.0;                                // B.4;
    for N:= 1 to 18 do begin
     BN:=power(GIJ0+1.0-G[N],G[N])                                   // B.2
      * power(QI[I]*QI[J]+1.0-Q[N],Q[N])
      * power(sqrt(FI[I]*FI[J])+1.0-F[N],F[N])
      * power(SI[I]*SI[J]+1.0-S[N],S[N])
      * power(WI[I]*WI[J]+1.0-W[N],W[N]);
     BI[N] := BI[N]+A[N]*XIJ*power(EIJ0,U[N])*power(KI[I]*KI[J],1.5)*BN;  // B.1;
    end;
   end;
  end;
 end;

 K1:=power(K1,0.2);                                                  // B.11;
 U1:=power(U1,0.2);                                                  // B.6;
 for N:=13 to 58 do
  CNS[N]:=power(G1+1.0-G[N],G[N])                                    // B.5
        * power(Q1*Q1+1.0-Q[N],Q[N])
        * power(F1+1.0-F[N],F[N])
        * A[N]*power(U1,U[N]);

end;


procedure PZOFDT(var D, T, P, Z, BMIX: double);
var N:integer; DR: double;
begin
 DR:=D*K1*K1*K1;                                                     // (2);
 BMIX:=0;
 for N:=1 to 18 do BMIX:=BMIX+BI[N]/power(T,U[N]);                   // B.1;
 Z:=1.0+BMIX*D;                                                      // (1) B.10;
 for N:=13 to 18 do Z:=Z-DR*CNS[N]/power(T,U[N]);                    // (1) B.10;
 for N:=13 to 58 do Z:=Z+CNS[N]/power(T,U[N])*(B[N]-C[N]*K[N]*power(DR,K[N]))*power(DR,B[N])*EXP(-C[N]*power(DR,K[N]));
 P:=D*RGAS*T*Z;
end;


procedure DZOFPT(var P, T, D, Z, BMIX: double);
var I: integer; X1, X2, X3, F, F1, F2, F3, TOL: double;
begin
 TOL := 0.5E-9;
 X1 := 0.000001;
 X2 := 40.0;
 D := 0;
 PZOFDT(X1, T, F1, Z, BMIX);
 PZOFDT(X2, T, F2, Z, BMIX);
 F1 := F1 - P;
 F2 := F2 - P;
 if (F1*F2>=0) then exit;

//------------------
// BEGIN ITERATING
//------------------
 for  I:=1 to 50 do begin
// Use False Position to get point 3.
  X3:=X1-F1*(X2-X1)/(F2-F1);
  PZOFDT(X3, T, F3, Z, BMIX);
  F3:=F3-P;
// Use points 1, 2, and 3 to estimate the root using Chamber's method (quadratic solution).
  D:=X1*F2*F3/((F1-F2)*(F1-F3))+X2*F1*F3/((F2-F1)*(F2-F3))+X3*F1*F2/((F3-F1)*(F3-F2));
  if ((D-X1)*(D-X2)>=0) then D:=(X1+X2)/2;
  PZOFDT(D, T, F, Z, BMIX);
  F := F - P;
  if (ABS(F)<=TOL) then exit;
// Discard quadratic solution if false position root is closer.
  if (ABS(F3)<ABS(F)) and (F*F3>0) then begin
   if F3*F1>0 then begin X1:=X3; F1:=F3 end
              else begin X2:=X3; F2:=F3 end end
                                   else begin
// Swap in new value from quadratic solution
    if (F*F3<0) then begin X1:=D; F1:=F; X2:=X3; F2:=F3 end
                else if (F3*F1 > 0) then begin X1:=D; F1:=F end
                                    else begin X2:=D; F2:=F end;
   end;
  end;
  D:=0;
end;


begin

end.
